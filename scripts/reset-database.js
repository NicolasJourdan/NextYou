import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import mysql from 'mysql2/promise';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Configuration de la base de donn√©es
const dbConfig = {
  host: process.env.DB_HOST || 'mysql',
  port: process.env.DB_PORT || 3306,
  user: process.env.DB_USER || 'nextyou',
  password: process.env.DB_PASSWORD || 'nextyou123',
  database: process.env.DB_NAME || 'nextyou',
  multipleStatements: true
};

async function resetDatabase() {
  let connection;
  
  try {
    console.log('üîÑ D√©but de la r√©initialisation de la base de donn√©es...');
    
    // Connexion √† la base de donn√©es
    connection = await mysql.createConnection(dbConfig);
    console.log('‚úÖ Connexion √† MySQL √©tablie');
    
    // Suppression des donn√©es existantes
    console.log('üóëÔ∏è  Suppression des donn√©es existantes...');
    await connection.execute('DELETE FROM recipe_tags');
    await connection.execute('DELETE FROM recipes');
    await connection.execute('DELETE FROM tags');
    console.log('‚úÖ Donn√©es supprim√©es');
    
    // R√©initialisation des auto-increment
    await connection.execute('ALTER TABLE tags AUTO_INCREMENT = 1');
    console.log('‚úÖ Auto-increment r√©initialis√©');
    
    // Lecture et ex√©cution du script d'initialisation
    console.log('üìù Ex√©cution du script d\'initialisation...');
    const initFilePath = path.join(__dirname, '..', 'database', 'init.sql');
    const initContent = fs.readFileSync(initFilePath, 'utf8');
    await connection.execute(initContent);
    console.log('‚úÖ Structure de base cr√©√©e');
    
    // Lecture et ex√©cution du script de donn√©es
    console.log('üìù Ex√©cution du script de donn√©es...');
    const seedFilePath = path.join(__dirname, '..', 'database', 'seed-data.sql');
    const seedContent = fs.readFileSync(seedFilePath, 'utf8');
    await connection.execute(seedContent);
    console.log('‚úÖ Donn√©es ins√©r√©es');
    
    console.log('‚úÖ Base de donn√©es r√©initialis√©e avec succ√®s !');
    
    // V√©rification finale
    console.log('\nüìä V√©rification finale :');
    
    const [recipes] = await connection.execute('SELECT COUNT(*) as count FROM recipes');
    console.log(`   - ${recipes[0].count} recettes`);
    
    const [tags] = await connection.execute('SELECT COUNT(*) as count FROM tags');
    console.log(`   - ${tags[0].count} tags`);
    
    const [recipeTags] = await connection.execute('SELECT COUNT(*) as count FROM recipe_tags');
    console.log(`   - ${recipeTags[0].count} associations`);
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©initialisation:', error);
    process.exit(1);
  } finally {
    if (connection) {
      await connection.end();
      console.log('üîå Connexion ferm√©e');
    }
  }
}

// Ex√©cution du script
resetDatabase(); 